plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
	id 'checkstyle'
}

group = 'com.group8'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

checkstyle {
	configFile = file("${rootDir}/checkstyle-rules.xml")
	sourceSets = [sourceSets.main]
}

jacoco {
	toolVersion = "0.8.11"
}

jacocoTestReport {
	reports {
		html.outputLocation = file("${buildDir}/jacocoHtml")
	}
	doLast {
		String fixedBuildDir = buildDir.toString().replace('\\', '/')
		println "file:///$fixedBuildDir/jacocoHtml/index.html"
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				// minimum percentage of code coverage
				minimum = 0.2
			}
		}
		rule {
			enabled = false
			element = 'CLASS'
			includes = ['org.gradle.*']
			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 0.3
			}
		}
	}
}

// Fail the build if code coverage isn't high enough
check.dependsOn jacocoTestCoverageVerification

// Run code coverage after tests run
jacocoTestReport.mustRunAfter test


task doAll {
	// Runs a java build. Imported from the java plugin
	dependsOn build
	// Runs all the tests. Imported from the java plugin.
	dependsOn test
	// Runs pmd. Imported by pmd plugin
	dependsOn check
	// Runs java doc. Imported from the java plugin
	dependsOn javadoc
	println 'all done!'
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}
